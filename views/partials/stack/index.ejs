<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Stack Visualization</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #dadada; /* Light background color */
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #222222;
            padding-right: 10px ;
        }
        #controls {
            background-color: #ffffff77; /* White background for controls */
            padding: 20px;
            border-radius: 20px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            width: 80%;
            max-width: 600px;
            transition: transform 0.3s;
        }
        #controls:hover {
            transform: scale(1.02);
        }
        h1 {
            color: #1f1f1f;
            text-align: center;
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #2b2b2b;
        }
        input[type="text"], input[type="range"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #008fef;
            border-radius: 10px;
        }
        button {
            background-color: #003cff; /* Bootstrap primary color */
            color: white;
            border: none;
            padding: 10px 15px;
            margin: 5px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 16px;
        }
        button:hover {
            background-color: #0056b3; /* Darker shade on hover */
            transform: translateY(-2px);
        }
        #visualization {
            background-color: #ce4f4f66; /* White background for visualization area */
            border-radius: 20px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 90%;
            max-width: 800px;
            margin-top: 20px;
        }
    </style>
</head>
<%- include("../navbar.ejs") %>
<body style="margin-top: 80px;">
    <div id="controls">
        <h1>Enhanced Stack Visualization</h1>
        <label for="element">Enter Element:</label>
        <input type="text" id="element" placeholder="e.g., 42">
        <button id="push">Push</button>
        <button id="pop">Pop</button>
        <button id="switch-representation">Switch to Linked List</button>
        <button id="traverse">Traverse Stack</button>
        <label for="speed">Animation Speed:</label>
        <input type="range" id="speed-slider" min="1" max="60" value="30">
        <span id="speed-value">30</span> FPS
    </div>
    <div id="visualization"></div>

    <script>
        let stack = [];
        let useArrayRepresentation = true;
        let speed = 30;
        let animationQueue = [];
        let currentAnimation = null;
        let highlightedIndex = -1;

        function setup() {
            let canvas = createCanvas(800, 600);
            canvas.parent('visualization');
            frameRate(speed);
            loop(); // Keep drawing continuously
        }

        function draw() {
            background(255, 255, 255, 200); // White background with slight transparency

            if (currentAnimation) {
                currentAnimation.update();
                if (currentAnimation.isDone()) {
                    currentAnimation = null;
                    highlightedIndex = -1;
                }
            } else if (animationQueue.length > 0) {
                currentAnimation = animationQueue.shift();
            }

            if (useArrayRepresentation) {
                drawArrayStack();
            } else {
                drawLinkedListStack();
            }
        }

        document.getElementById('speed-slider').oninput = function() {
            speed = parseInt(this.value);
            document.getElementById('speed-value').innerText = speed;
            frameRate(speed);
        };

        document.getElementById('push').onclick = function() {
            let element = document.getElementById('element').value;
            if (element) {
                stack.push(element);
                document.getElementById('element').value = '';
                animationQueue.push(new PushAnimation(stack.length - 1));
            }
        };

        document.getElementById('pop').onclick = function() {
            if (stack.length > 0) {
                animationQueue.push(new PopAnimation(stack.length - 1));
                animationQueue.push(new PushAnimation(stack.length - 1)); // Reuse push animation for smoothness
                stack.pop();
            }
        };

        document.getElementById('switch-representation').onclick = function() {
            useArrayRepresentation = !useArrayRepresentation;
            let buttonText = useArrayRepresentation ? 'Switch to Linked List' : 'Switch to Array';
            document.getElementById('switch-representation').innerText = buttonText;
        };

        document.getElementById('traverse').onclick = function() {
            animationQueue = stack.map((_, index) => new TraverseAnimation(index));
        };

        function drawArrayStack() {
            textAlign(CENTER, CENTER);
            textSize(16);

            let startX = 300;
            let startY = 500;
            let boxWidth = 100;
            let boxHeight = 50;

            for (let i = 0; i < stack.length; i++) {
                if (i === highlightedIndex) {
                    fill(255, 235, 59); // Bright yellow for highlighting
                } else {
                    fill(129, 207, 224); // Light blue color for boxes
                }
                rect(startX, startY - i * boxHeight, boxWidth, boxHeight, 10); // Rounded corners
                fill(0);
                text(stack[i], startX + boxWidth / 2, startY - i * boxHeight + boxHeight / 2);
            }

            if (stack.length > 0) {
                textSize(12);
                fill(255, 0, 0);
                text('Top', startX + boxWidth + 30, startY - (stack.length - 1) * boxHeight + 20);
            }
        }

        function drawLinkedListStack() {
            textAlign(CENTER, CENTER);
            textSize(16);

            let startX = 300;
            let startY = 500;
            let boxWidth = 100;
            let boxHeight = 50;

            for (let i = 0; i < stack.length; i++) {
                if (i === highlightedIndex) {
                    fill(255, 235, 59);
                } else {
                    fill(129, 207, 224);
                }
                rect(startX, startY - i * boxHeight, boxWidth, boxHeight, 10);
                fill(0);
                text(stack[i], startX + boxWidth / 2, startY - i * boxHeight + boxHeight / 2);

                if (i < stack.length - 1) {
                    let arrowStartX = startX + boxWidth / 2;
                    let arrowStartY = startY - i * boxHeight - boxHeight / 2;
                    let arrowEndX = startX + boxWidth / 2;
                    let arrowEndY = startY - (i + 1) * boxHeight + boxHeight / 2;

                    stroke(0);
                    line(arrowStartX, arrowStartY, arrowEndX, arrowEndY);
                    fill(0);
                    triangle(arrowEndX - 5, arrowEndY - 5, arrowEndX + 5, arrowEndY - 5, arrowEndX, arrowEndY);
                }
            }

            if (stack.length > 0) {
                textSize(12);
                fill(255, 0, 0);
                text('Top (Head)', startX + boxWidth + 30, startY - (stack.length - 1) * boxHeight + 20);
            }
        }

        class PushAnimation {
            constructor(index) {
                this.index = index;
                this.duration = 30;
                this.currentFrame = 0;
            }

            update() {
                this.currentFrame++;
                highlightedIndex = this.index;
            }

            isDone() {
                return this.currentFrame >= this.duration;
            }
        }

        class PopAnimation {
            constructor(index) {
                this.index = index;
                this.duration = 30;
                this.currentFrame = 0;
            }

            update() {
                this.currentFrame++;
                highlightedIndex = this.index;
            }

            isDone() {
                return this.currentFrame >= this.duration;
            }
        }

        class TraverseAnimation {
            constructor(index) {
                this.index = index;
                this.duration = 30;
                this.currentFrame = 0;
            }

            update() {
                this.currentFrame++;
                highlightedIndex = this.index;
            }

            isDone() {
                return this.currentFrame >= this.duration;
            }
        }
    </script>
</body>
</html>
