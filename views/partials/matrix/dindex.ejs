<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles/matrixmul/dstyle.css">
    <title>Matrix Multiplication Visualization</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Matrix Multiplication Visualization</h1>
        <div class="matrix-container">
            <div id="matrix1" class="matrix"></div>
            <span>Ã—</span>
            <div id="matrix2" class="matrix"></div>
            <span>=</span>
            <div id="result" class="matrix"></div>
        </div>
        <div id="visualization"></div>
        <button id="next-step">Next Step</button>
    </div>

    <script src="styles\matrixmul\js\dmatrix_multiplication.js"></script>
</body>
</html> -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Matrix Multiplication Visualizer</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f7f8fa;
            color: #333;
            text-align: center;
            padding: 40px;
            margin: 0;
        }

        h1, h2 {
            color: #2f80ed;
            margin-bottom: 20px;
        }

        h1 {
            font-size: 2.5em;
        }

        h2 {
            font-size: 1.8em;
        }

        input {
            width: 60px;
            height: 40px;
            font-size: 1em;
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 5px;
            margin: 10px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
            text-align: center;
            outline: none;
        }

        button {
            background-color: #2f80ed;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.3s;
            margin-top: 20px;
        }

        button:hover {
            background-color: #1c6fcc;
        }

        .matrix-container {
            display: flex;
            justify-content: space-around;
            margin-top: 40px;
            gap: 20px;
        }

        .matrix-card {
            background-color: #fff;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);
            width: 30%;
            text-align: center;
        }

        .grid {
            display: grid;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
            justify-items: center;
        }

        .grid div {
            background-color: #f1f3f5;
            border-radius: 8px;
            padding: 20px;
            font-weight: bold;
            position: relative;
        }

        .address {
            font-size: 0.8em;
            color: #777;
            position: absolute;
            bottom: 4px;
            left: 0;
            right: 0;
        }

        .calculation {
            font-size: 18px;
            font-family: 'Arial', sans-serif;
            color: #444;
            text-align: center;
            margin-top: 20px;
        }

        .fade {
            opacity: 0;
            animation: fadeIn 2s forwards;
        }

        @keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }
    </style>
</head>

<body>
    <h1>Matrix Multiplication Visualizer</h1>

    <div class="matrix-container">
        <div class="matrix-card">
            <h2>Matrix A</h2>
            <div id="matrixA" class="matrix"></div>
            <div>
                <input type="number" id="rowsA" value="2" min="1" placeholder="Rows">
                <input type="number" id="colsA" value="2" min="1" placeholder="Cols">
            </div>
            <button onclick="createMatrix('A')">Create Matrix A</button>
        </div>

        <div class="matrix-card">
            <h2>Matrix B</h2>
            <div id="matrixB" class="matrix"></div>
            <div>
                <input type="number" id="rowsB" value="2" min="1" placeholder="Rows">
                <input type="number" id="colsB" value="2" min="1" placeholder="Cols">
            </div>
            <button onclick="createMatrix('B')">Create Matrix B</button>
        </div>
    </div>

    <button onclick="multiplyMatrices()" style="margin-top: 30px;">Multiply Matrices</button>

    <div class="matrix-container">
        <div class="matrix-card">
            <h2>Matrix C (Result)</h2>
            <div id="matrixC" class="matrix"></div>
        </div>
    </div>

    <div class="calculation" id="calculationDisplay"></div>

    <script>
        function createMatrix(matrixName) {
            const rows = document.getElementById(`rows${matrixName}`).value;
            const cols = document.getElementById(`cols${matrixName}`).value;
            const container = document.getElementById(`matrix${matrixName}`);
            container.innerHTML = '';
            container.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
            container.classList.add('grid');

            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    const cell = document.createElement('div');
                    cell.innerHTML = `<input type='number' id="${matrixName}_${i}_${j}" value="0" style="width: 50px;" class="fade" />`;
                    const address = document.createElement('div');
                    address.classList.add('address');
                    address.textContent = `Address: 0x${(i * cols + j).toString(16).toUpperCase()}`;
                    cell.appendChild(address);
                    container.appendChild(cell);
                }
            }
        }

        function multiplyMatrices() {
            const rowsA = parseInt(document.getElementById('rowsA').value);
            const colsA = parseInt(document.getElementById('colsA').value);
            const rowsB = parseInt(document.getElementById('rowsB').value);
            const colsB = parseInt(document.getElementById('colsB').value);

            if (colsA !== rowsB) {
                alert('Error: Number of columns in Matrix A must equal the number of rows in Matrix B.');
                return;
            }

            const matrixA = [];
            const matrixB = [];
            const matrixC = new Array(rowsA).fill(0).map(() => new Array(colsB).fill(0));
            const calculationDisplay = document.getElementById('calculationDisplay');
            calculationDisplay.innerHTML = '';

            // Fill Matrix A
            for (let i = 0; i < rowsA; i++) {
                matrixA[i] = [];
                for (let j = 0; j < colsA; j++) {
                    matrixA[i][j] = parseInt(document.getElementById(`A_${i}_${j}`).value);
                }
            }

            // Fill Matrix B
            for (let i = 0; i < rowsB; i++) {
                matrixB[i] = [];
                for (let j = 0; j < colsB; j++) {
                    matrixB[i][j] = parseInt(document.getElementById(`B_${i}_${j}`).value);
                }
            }

            // Perform multiplication
            for (let i = 0; i < rowsA; i++) {
                for (let j = 0; j < colsB; j++) {
                    for (let k = 0; k < colsA; k++) {
                        matrixC[i][j] += matrixA[i][k] * matrixB[k][j];
                    }
                    calculationDisplay.innerHTML += `C[${i}][${j}] = ${matrixC[i][j]} <br/>`;
                }
            }

            // Display Matrix C
            const containerC = document.getElementById('matrixC');
            containerC.innerHTML = '';
            containerC.style.gridTemplateColumns = `repeat(${colsB}, 1fr)`;
            containerC.classList.add('grid');

            for (let i = 0; i < rowsA; i++) {
                for (let j = 0; j < colsB; j++) {
                    const cell = document.createElement('div');
                    cell.textContent = matrixC[i][j];
                    const address = document.createElement('div');
                    address.classList.add('address');
                    address.textContent = `Address: 0x${(i * colsB + j).toString(16).toUpperCase()}`;
                    cell.appendChild(address);
                    containerC.appendChild(cell);
                }
            }
        }
    </script>
</body>

</html>
