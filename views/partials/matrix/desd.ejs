<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles/linked_list/css/sdes.css">
    <title>Matrix Multiplication with Dynamic Memory Allocation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
        }
        pre {
            background-color: #f4f4f4;
            border: 1px solid #ddd;
            padding: 10px;
            overflow-x: auto;
        }
        h1 {
            color: #333;
        }
        code {
            font-family: Consolas, monospace;
            background-color: #f0f0f0;
            padding: 2px 4px;
            border-radius: 3px;
        }
    </style>
</head>
<body class="cont">

    <h1>Matrix Multiplication Using Dynamic Memory Allocation</h1>

    <p>
        Matrix multiplication is a fundamental operation in computer science, especially in areas like graphics, machine learning, and numerical simulations. Dynamic memory allocation (DMA) is essential when working with matrices whose dimensions are not fixed at compile time, allowing us to allocate memory based on user inputs or runtime conditions. Here's how matrix multiplication is implemented using DMA in C or similar programming languages.
    </p>

    <h2>Dynamic Memory Allocation (DMA) in C</h2>
    <p>
        In C, memory for variables can be allocated dynamically using functions like <code>malloc()</code>, <code>calloc()</code>, and <code>realloc()</code> from the standard library. This is particularly useful for matrices, as their size may not be known until runtime. The general form for dynamically allocating memory for a 2D array (i.e., a matrix) is:
    </p>

    <pre><code>int** matrix = (int**) malloc(rows * sizeof(int*));
for (int i = 0; i &lt; rows; i++) {
    matrix[i] = (int*) malloc(cols * sizeof(int));
}
</code></pre>

    <p>
        Here, <code>matrix</code> is a pointer to an array of pointers, where each pointer refers to a dynamically allocated array of integers (or floats). The advantage of dynamic memory allocation is flexibility. We can adjust the matrix size during execution and free the memory when it's no longer needed using <code>free()</code>.
    </p>

    <h2>Matrix Multiplication Concept</h2>
    <p>
        Matrix multiplication takes two matrices, say <code>A</code> and <code>B</code>, and produces a third matrix <code>C</code>. For matrix multiplication to be valid, the number of columns in matrix <code>A</code> must equal the number of rows in matrix <code>B</code>. Given matrices <code>A</code> (of size <code>m x n</code>) and <code>B</code> (of size <code>n x p</code>), the resulting matrix <code>C</code> will have dimensions <code>m x p</code>, and each element <code>C[i][j]</code> in the resulting matrix is calculated as:
    </p>

    <pre><code>C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + ... + A[i][n-1] * B[n-1][j];
</code></pre>

    <p>
        This process involves summing up the products of corresponding elements from the row of <code>A</code> and the column of <code>B</code>.
    </p>

    <h2>Matrix Multiplication Using Dynamic Memory Allocation</h2>
    <p>
        To implement matrix multiplication using dynamic memory allocation in C, we follow these steps:
    </p>

    <h3>1. Input Matrix Dimensions</h3>
    <p>
        Get dimensions <code>m</code>, <code>n</code>, and <code>p</code> from the user (or another source) at runtime.
    </p>

    <h3>2. Dynamic Memory Allocation</h3>
    <p>
        Allocate memory for the two input matrices, <code>A</code> (of size <code>m x n</code>) and <code>B</code> (of size <code>n x p</code>), and the resulting matrix <code>C</code> (of size <code>m x p</code>).
    </p>

    <pre><code>int** A = (int**) malloc(m * sizeof(int*));
for (int i = 0; i &lt; m; i++)
    A[i] = (int*) malloc(n * sizeof(int));

int** B = (int**) malloc(n * sizeof(int*));
for (int i = 0; i &lt; n; i++)
    B[i] = (int*) malloc(p * sizeof(int));

int** C = (int**) malloc(m * sizeof(int*));
for (int i = 0; i &lt; m; i++)
    C[i] = (int*) malloc(p * sizeof(int));
</code></pre>

    <h3>3. Populate Matrices</h3>
    <p>
        Use loops to fill matrices <code>A</code> and <code>B</code> with user-provided or random values.
    </p>

    <h3>4. Matrix Multiplication Logic</h3>
    <p>
        Use triple nested loops to compute the product of matrices <code>A</code> and <code>B</code>, storing the result in <code>C</code>.
    </p>

    <pre><code>for (int i = 0; i &lt; m; i++) {
    for (int j = 0; j &lt; p; j++) {
        C[i][j] = 0;  // Initialize the element
        for (int k = 0; k &lt; n; k++) {
            C[i][j] += A[i][k] * B[k][j];
        }
    }
}
</code></pre>

    <h3>5. Free Allocated Memory</h3>
    <p>
        Once the computation is complete, free the dynamically allocated memory to avoid memory leaks.
    </p>

    <pre><code>for (int i = 0; i &lt; m; i++)
    free(A[i]);
free(A);

for (int i = 0; i &lt; n; i++)
    free(B[i]);
free(B);

for (int i = 0; i &lt; m; i++)
    free(C[i]);
free(C);
</code></pre>

    <h2>Conclusion</h2>
    <p>
        Matrix multiplication using dynamic memory allocation provides flexibility in dealing with matrices of varying sizes at runtime. While allocating memory dynamically allows us to handle larger datasets and arbitrary matrix sizes, it requires careful memory management to avoid memory leaks. Thus, proper use of <code>malloc()</code> and <code>free()</code> is crucial in ensuring efficient matrix manipulation.
    </p>
    <div id="code-section">
        <h2>Code Editor</h2>
        <div id="editor" style="height: 400px;"></div>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.21.2/min/vs/loader.js"></script>
        <script src="styles/matrixmul/js/deditor.js"></script>
    </div>
    <div style="width: 100%;display: flex;justify-content: center;align-items: center;margin: 20px;">
        <a href="/dmatrix">Visualization</a>

</body>
</html>
